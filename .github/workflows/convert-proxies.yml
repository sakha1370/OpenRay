name: Convert Proxies

on:
  push:
    paths:
      - output/all_valid_proxies.txt
      - output_iran/all_valid_proxies_for_iran.txt
  workflow_dispatch:

# Add permissions at workflow level
permissions:
  contents: write

jobs:
  convert:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # Use same checkout configuration as working workflow
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      # Use same Git configuration as working workflow
      - name: Configure Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Setup Python for HTTP server
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Start temporary HTTP server for proxy files
        run: |
          # Start a simple HTTP server to serve proxy files
          cd ${{ github.workspace }}
          python3 -m http.server 8080 &
          HTTP_PID=$!
          echo "HTTP_PID=$HTTP_PID" >> $GITHUB_ENV
          
          # Wait for HTTP server to start
          sleep 3
          
          # Test if HTTP server is running
          curl -f http://localhost:8080/ || (echo "HTTP server failed to start" && exit 1)

      - name: Start subconverter service
        run: |
          # Start subconverter as a service
          docker run -d --name subconverter -p 25500:25500 --add-host=host.docker.internal:host-gateway tindy2013/subconverter:latest
          
          # Wait for service to be ready
          sleep 10
          
          # Test if service is running
          curl -f http://localhost:25500/version || (echo "Subconverter service failed to start" && exit 1)

      ##############################
      # Convert general proxies
      ##############################
      - name: Convert general proxies
        run: |
          mkdir -p ${{ github.workspace }}/output/converted
          
          # First test the subconverter API
          echo "Testing subconverter API..."
          curl -v "http://localhost:25500/version" || echo "Version endpoint failed"
          
          # URL encode the proxy file URL properly
          PROXY_URL="http://host.docker.internal:8080/output/all_valid_proxies.txt"
          ENCODED_URL=$(python3 -c "import urllib.parse; print(urllib.parse.quote('$PROXY_URL', safe=''))")
          
          echo "Original URL: $PROXY_URL"
          echo "Encoded URL: $ENCODED_URL"
          
          # Test if the proxy file is accessible
          echo "Testing proxy file accessibility..."
          curl -I "$PROXY_URL" || echo "Proxy file not accessible"
          
          for type in clash meta quantumult quantumult-x surge surfboard loon ss v2ray sing-box; do
            echo "Converting to $type format..."
            
            # Try with different parameter combinations
            API_URL="http://localhost:25500/sub?target=$type&url=$ENCODED_URL"
            echo "API URL: $API_URL"
            
            # Use subconverter API to convert proxies
            curl -v -X GET "$API_URL" \
              -o "${{ github.workspace }}/output/converted/$type.txt" \
              -H "User-Agent: ClashX/1.30.1" \
              --connect-timeout 30 \
              --max-time 120
            
            CURL_EXIT_CODE=$?
            echo "Curl exit code: $CURL_EXIT_CODE"
            
            if [ $CURL_EXIT_CODE -eq 0 ] && [ -s "${{ github.workspace }}/output/converted/$type.txt" ]; then
              echo "Successfully converted to $type"
              echo "File size: $(wc -c < "${{ github.workspace }}/output/converted/$type.txt") bytes"
            else
              echo "Failed to convert to $type (exit code: $CURL_EXIT_CODE)"
              if [ -f "${{ github.workspace }}/output/converted/$type.txt" ]; then
                echo "Response content:"
                head -n 10 "${{ github.workspace }}/output/converted/$type.txt"
              fi
              # Create empty file if conversion failed
              touch "${{ github.workspace }}/output/converted/$type.txt"
            fi
            echo "---"
          done

      ##############################
      # Convert Iran proxies
      ##############################
      - name: Convert Iran proxies
        run: |
          mkdir -p ${{ github.workspace }}/output_iran/converted
          
          # URL encode the Iran proxy file URL properly
          PROXY_URL="http://host.docker.internal:8080/output_iran/all_valid_proxies_for_iran.txt"
          ENCODED_URL=$(python3 -c "import urllib.parse; print(urllib.parse.quote('$PROXY_URL', safe=''))")
          
          echo "Original Iran URL: $PROXY_URL"
          echo "Encoded Iran URL: $ENCODED_URL"
          
          # Test if the Iran proxy file is accessible
          echo "Testing Iran proxy file accessibility..."
          curl -I "$PROXY_URL" || echo "Iran proxy file not accessible"
          
          for type in clash meta quantumult quantumult-x surge surfboard loon ss v2ray sing-box; do
            echo "Converting Iran proxies to $type format..."
            
            # Try with different parameter combinations
            API_URL="http://localhost:25500/sub?target=$type&url=$ENCODED_URL"
            echo "Iran API URL: $API_URL"
            
            # Use subconverter API to convert proxies
            curl -v -X GET "$API_URL" \
              -o "${{ github.workspace }}/output_iran/converted/$type.txt" \
              -H "User-Agent: ClashX/1.30.1" \
              --connect-timeout 30 \
              --max-time 120
            
            CURL_EXIT_CODE=$?
            echo "Curl exit code: $CURL_EXIT_CODE"
            
            if [ $CURL_EXIT_CODE -eq 0 ] && [ -s "${{ github.workspace }}/output_iran/converted/$type.txt" ]; then
              echo "Successfully converted Iran proxies to $type"
              echo "File size: $(wc -c < "${{ github.workspace }}/output_iran/converted/$type.txt") bytes"
            else
              echo "Failed to convert Iran proxies to $type (exit code: $CURL_EXIT_CODE)"
              if [ -f "${{ github.workspace }}/output_iran/converted/$type.txt" ]; then
                echo "Response content:"
                head -n 10 "${{ github.workspace }}/output_iran/converted/$type.txt"
              fi
              # Create empty file if conversion failed
              touch "${{ github.workspace }}/output_iran/converted/$type.txt"
            fi
            echo "---"
          done

      - name: Stop services
        run: |
          # Stop subconverter
          docker stop subconverter || true
          docker rm subconverter || true
          
          # Stop HTTP server
          if [ ! -z "$HTTP_PID" ]; then
            kill $HTTP_PID || true
          fi

      ##############################
      # Commit and push - Use same approach as working workflow
      ##############################
      - name: Commit and push changes (force)
        run: |
          git add output/converted/ output_iran/converted/
          git commit -m "Update converted proxy lists [skip ci]" || echo "No changes to commit"
          git push --force https://x-access-token:${{ secrets.PERSONAL_TOKEN }}@github.com/${{ github.repository }}.git main