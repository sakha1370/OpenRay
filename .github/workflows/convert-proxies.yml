name: Convert Proxies

on:
  push:
    paths:
      - output/all_valid_proxies.txt
      - output_iran/all_valid_proxies_for_iran.txt
  workflow_dispatch:

# Add permissions at workflow level
permissions:
  contents: write

jobs:
  convert:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # Use same checkout configuration as working workflow
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      # Use same Git configuration as working workflow
      - name: Configure Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Setup Python for HTTP server
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Start subconverter service with volume mount
        run: |
          # Create a shared directory and copy proxy files there
          mkdir -p /tmp/shared-data
          cp output/all_valid_proxies.txt /tmp/shared-data/ 2>/dev/null || echo "General proxy file not found"
          cp output_iran/all_valid_proxies_for_iran.txt /tmp/shared-data/ 2>/dev/null || echo "Iran proxy file not found"
          
          # Start subconverter with volume mount to access files directly
          docker run -d --name subconverter \
            -p 25500:25500 \
            -v /tmp/shared-data:/app/data \
            tindy2013/subconverter:latest
          
          # Wait for service to be ready
          sleep 15
          
          # Test if service is running
          curl -f http://localhost:25500/version || (echo "Subconverter service failed to start" && exit 1)

      ##############################
      # Convert general proxies
      ##############################
      - name: Convert general proxies
        run: |
          mkdir -p ${{ github.workspace }}/output/converted
          
          # Check if proxy file exists
          if [ ! -f "/tmp/shared-data/all_valid_proxies.txt" ]; then
            echo "General proxy file not found, skipping conversion"
            for type in clash meta quantumult quantumult-x surge surfboard loon ss v2ray sing-box; do
              touch "${{ github.workspace }}/output/converted/$type.txt"
            done
          else
            echo "Converting general proxies..."
            
            # Read proxy content and use it directly via POST
            PROXY_CONTENT=$(cat /tmp/shared-data/all_valid_proxies.txt)
            
            for type in clash meta quantumult quantumult-x surge surfboard loon ss v2ray sing-box; do
              echo "Converting to $type format..."
              
              # Method 1: Try with base64 encoded content
              ENCODED_CONTENT=$(echo "$PROXY_CONTENT" | base64 -w 0)
              
              curl -X POST "http://localhost:25500/sub?target=$type" \
                -H "Content-Type: application/x-www-form-urlencoded" \
                -d "config=$ENCODED_CONTENT" \
                -o "${{ github.workspace }}/output/converted/$type.txt" \
                --connect-timeout 30 \
                --max-time 120 \
                --silent --show-error
              
              if [ -s "${{ github.workspace }}/output/converted/$type.txt" ]; then
                echo "✓ Successfully converted to $type ($(wc -c < "${{ github.workspace }}/output/converted/$type.txt") bytes)"
              else
                echo "✗ Failed to convert to $type, trying alternative method..."
                
                # Method 2: Try with raw content via GET with data parameter
                ENCODED_URL_CONTENT=$(echo "$PROXY_CONTENT" | python3 -c "import sys, urllib.parse; print(urllib.parse.quote(sys.stdin.read()))")
                
                curl -X GET "http://localhost:25500/sub?target=$type&config=$ENCODED_URL_CONTENT" \
                  -o "${{ github.workspace }}/output/converted/$type.txt" \
                  --connect-timeout 30 \
                  --max-time 120 \
                  --silent --show-error
                
                if [ -s "${{ github.workspace }}/output/converted/$type.txt" ]; then
                  echo "✓ Successfully converted to $type via alternative method"
                else
                  echo "✗ All methods failed for $type, creating empty file"
                  touch "${{ github.workspace }}/output/converted/$type.txt"
                fi
              fi
            done
          fi

      ##############################
      # Convert Iran proxies
      ##############################
      - name: Convert Iran proxies
        run: |
          mkdir -p ${{ github.workspace }}/output_iran/converted
          
          # Check if Iran proxy file exists
          if [ ! -f "/tmp/shared-data/all_valid_proxies_for_iran.txt" ]; then
            echo "Iran proxy file not found, skipping conversion"
            for type in clash meta quantumult quantumult-x surge surfboard loon ss v2ray sing-box; do
              touch "${{ github.workspace }}/output_iran/converted/$type.txt"
            done
          else
            echo "Converting Iran proxies..."
            
            # Read proxy content and use it directly via POST
            PROXY_CONTENT=$(cat /tmp/shared-data/all_valid_proxies_for_iran.txt)
            
            for type in clash meta quantumult quantumult-x surge surfboard loon ss v2ray sing-box; do
              echo "Converting Iran proxies to $type format..."
              
              # Method 1: Try with base64 encoded content
              ENCODED_CONTENT=$(echo "$PROXY_CONTENT" | base64 -w 0)
              
              curl -X POST "http://localhost:25500/sub?target=$type" \
                -H "Content-Type: application/x-www-form-urlencoded" \
                -d "config=$ENCODED_CONTENT" \
                -o "${{ github.workspace }}/output_iran/converted/$type.txt" \
                --connect-timeout 30 \
                --max-time 120 \
                --silent --show-error
              
              if [ -s "${{ github.workspace }}/output_iran/converted/$type.txt" ]; then
                echo "✓ Successfully converted Iran proxies to $type ($(wc -c < "${{ github.workspace }}/output_iran/converted/$type.txt") bytes)"
              else
                echo "✗ Failed to convert Iran proxies to $type, trying alternative method..."
                
                # Method 2: Try with raw content via GET
                ENCODED_URL_CONTENT=$(echo "$PROXY_CONTENT" | python3 -c "import sys, urllib.parse; print(urllib.parse.quote(sys.stdin.read()))")
                
                curl -X GET "http://localhost:25500/sub?target=$type&config=$ENCODED_URL_CONTENT" \
                  -o "${{ github.workspace }}/output_iran/converted/$type.txt" \
                  --connect-timeout 30 \
                  --max-time 120 \
                  --silent --show-error
                
                if [ -s "${{ github.workspace }}/output_iran/converted/$type.txt" ]; then
                  echo "✓ Successfully converted Iran proxies to $type via alternative method"
                else
                  echo "✗ All methods failed for Iran $type, creating empty file"
                  touch "${{ github.workspace }}/output_iran/converted/$type.txt"
                fi
              fi
            done
          fi

      - name: Debug converted files
        run: |
          echo "=== Conversion Results ==="
          echo "General proxies:"
          for file in output/converted/*.txt; do
            if [ -f "$file" ]; then
              echo "  $(basename "$file"): $(wc -c < "$file") bytes, $(wc -l < "$file") lines"
              if [ -s "$file" ]; then
                echo "    First few chars: $(head -c 100 "$file" | tr '\n' ' ')"
              fi
            fi
          done
          
          echo "Iran proxies:"
          for file in output_iran/converted/*.txt; do
            if [ -f "$file" ]; then
              echo "  $(basename "$file"): $(wc -c < "$file") bytes, $(wc -l < "$file") lines"
              if [ -s "$file" ]; then
                echo "    First few chars: $(head -c 100 "$file" | tr '\n' ' ')"
              fi
            fi
          done

      - name: Stop services and cleanup
        run: |
          # Stop subconverter
          docker stop subconverter || true
          docker rm subconverter || true
          
          # Clean up shared data
          rm -rf /tmp/shared-data

      ##############################
      # Commit and push - Use same approach as working workflow
      ##############################
      - name: Commit and push changes (force)
        run: |
          git add output/converted/ output_iran/converted/
          git commit -m "Update converted proxy lists [skip ci]" || echo "No changes to commit"
          git push --force https://x-access-token:${{ secrets.PERSONAL_TOKEN }}@github.com/${{ github.repository }}.git main